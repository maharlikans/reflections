What happens when you initialize a repository? Why do you need to do it?

Initializing a repository indicates that we want to use git to do version control on a particular directory. If you don’t, then we can’t tell. An index is created and we can tell whether or not git is tracking particular files. 

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is more for letting you determine which files you’d want to add to the repository. The repository itself is the entire file history and files. And the working directory seems to be which directory you’re changing files in the repository. 

Its utility is in allowing you to prepare to commit. 

How can you use the staging area to make sure you have one commit per logical
change?

You can make sure that all the files in the staging area are belonging to a single logical change, maybe a bug fix or something. Don’t add any files that don’t logically make sense as a change. 

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

If you’re making another version of your project or product, then using git is super helpful for creating another working version without breaking your main product. 

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git’s automatic merging vs. always doing merges
manually?
